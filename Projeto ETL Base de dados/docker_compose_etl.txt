version: '3.8'

services:
  # ============== POSTGRESQL ==============
  postgres:
    image: postgres:14-alpine
    container_name: etl_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: vendas_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/create_tables.sql:/docker-entrypoint-initdb.d/01-create_tables.sql
      - ./sql/insert_sample_data.sql:/docker-entrypoint-initdb.d/02-insert_sample_data.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - etl_network

  # ============== HADOOP NAMENODE ==============
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: etl_namenode
    environment:
      CLUSTER_NAME: etl_cluster
      CORE_CONF_fs_defaultFS: hdfs://namenode:8020
      HDFS_CONF_dfs_namenode_datanode_registration_ip___hostname___check: "false"
    ports:
      - "9870:9870"
      - "9000:9000"
    volumes:
      - namenode_data:/hadoop/dfs/name
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9870"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - etl_network

  # ============== HADOOP DATANODE ==============
  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: etl_datanode
    environment:
      CORE_CONF_fs_defaultFS: hdfs://namenode:8020
      HDFS_CONF_dfs_namenode_datanode_registration_ip___hostname___check: "false"
    ports:
      - "9864:9864"
    volumes:
      - datanode_data:/hadoop/dfs/data
    depends_on:
      namenode:
        condition: service_healthy
    networks:
      - etl_network

  # ============== AIRFLOW DATABASE ==============
  airflow_postgres:
    image: postgres:14-alpine
    container_name: etl_airflow_postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5433:5432"
    volumes:
      - airflow_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - etl_network

  # ============== AIRFLOW WEBSERVER ==============
  airflow_webserver:
    image: apache/airflow:2.7.0-python3.11
    container_name: etl_airflow_webserver
    environment:
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow_postgres:5432/airflow
      AIRFLOW__CORE__FERNET_KEY: d6Vefz3G0L_l_cFezma8bW1FSuMXA5lqM51qPmRv_E0=
    ports:
      - "8080:8080"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./scripts:/opt/airflow/scripts
      - airflow_logs:/opt/airflow/logs
      - ./config:/opt/airflow/config
    depends_on:
      airflow_postgres:
        condition: service_healthy
    command: |
      bash -c "airflow db init &&
               airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com 2>/dev/null;
               airflow webserver"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - etl_network

  # ============== AIRFLOW SCHEDULER ==============
  airflow_scheduler:
    image: apache/airflow:2.7.0-python3.11
    container_name: etl_airflow_scheduler
    environment:
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow_postgres:5432/airflow
      AIRFLOW__CORE__FERNET_KEY: d6Vefz3G0L_l_cFezma8bW1FSuMXA5lqM51qPmRv_E0=
    volumes:
      - ./dags:/opt/airflow/dags
      - ./scripts:/opt/airflow/scripts
      - airflow_logs:/opt/airflow/logs
    depends_on:
      - airflow_postgres
      - airflow_webserver
    command: airflow scheduler
    networks:
      - etl_network

volumes:
  postgres_data:
  namenode_data:
  datanode_data:
  airflow_postgres_data:
  airflow_logs:

networks:
  etl_network:
    driver: bridge